{
  "wrapper": "plaintext",
  "text": "Hi,\n\n   I recently upgraded to Solr 6.6 from 5.5. After running for a couple of\ndays, the entire Solr cluster suddenly came down with OOM exception. Once\nthe servers are being restarted, the memory footprint stays stable for a\nwhile before the sudden spike in memory occurs. The heap surges up quickly\nand hits the max causing the JVM to shut down due to OOM. It starts with\none server but eventually trickles downs to the rest of the nodes, bringing\nthe entire cluster down within a span of 10-15 mins.\n\nThe cluster consists of 6 nodes with two shards having 2 replicas each.\nThere are two collections with total index size close to 24 gb. Each server\nhas 8 CPUs with 30gb memory. Solr is running on an embedded jetty on jdk\n1.8. The JVM parameters are identical to 5.5:\n\nSOLR_JAVA_MEM=\"-Xms1000m -Xmx290000m\"\n\nGC_LOG_OPTS=\"-verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails \\\n  -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps\n-XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime\"\n\nGC_TUNE=\"-XX:NewRatio=3 \\\n-XX:SurvivorRatio=4 \\\n-XX:TargetSurvivorRatio=90 \\\n-XX:MaxTenuringThreshold=8 \\\n-XX:+UseConcMarkSweepGC \\\n-XX:+UseParNewGC \\\n-XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 \\\n-XX:+CMSScavengeBeforeRemark \\\n-XX:PretenureSizeThreshold=64m \\\n-XX:+UseCMSInitiatingOccupancyOnly \\\n-XX:CMSInitiatingOccupancyFraction=50 \\\n-XX:CMSMaxAbortablePrecleanTime=6000 \\\n-XX:+CMSParallelRemarkEnabled \\\n-XX:+ParallelRefProcEnabled\"\n\nI've tried G1GC based on Shawn's WIKI, but didn't make any difference.\nThough G1GC seemed to do well with GC initially, it showed similar\nbehaviour during the spike. It prompted me to revert back to CMS.\n\nI'm doing a hard commit every 5 mins.\n\nSOLR_OPTS=\"$SOLR_OPTS -Xss256k\"\nSOLR_OPTS=\"$SOLR_OPTS -Dsolr.autoCommit.maxTime=300000\"\nSOLR_OPTS=\"$SOLR_OPTS -Dsolr.clustering.enabled=true\"\nSOLR_OPTS=\"$SOLR_OPTS -Dpkiauth.ttl=120000\"\n\nOthe Solr configurations:\n\n<autoSoftCommit>\n<maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>\n</autoSoftCommit>\n\nCache settings:\n\n<maxBooleanClauses>4096</maxBooleanClauses>\n<slowQueryThresholdMillis>1000</slowQueryThresholdMillis>\n<filterCache class=\"solr.FastLRUCache\" size=\"20000\" initialSize=\"4096\"\nautowarmCount=\"512\"/>\n<queryResultCache class=\"solr.LRUCache\" size=\"2000\" initialSize=\"500\"\nautowarmCount=\"100\"/>\n<documentCache class=\"solr.LRUCache\" size=\"60000\" initialSize=\"5000\"\nautowarmCount=\"0\"/>\n<cache name=\"perSegFilter\" class=\"solr.search.LRUCache\" size=\"10\"\ninitialSize=\"0\" autowarmCount=\"10\" regenerator=\"solr.NoOpRegenerator\" />\n<fieldValueCache class=\"solr.FastLRUCache\" size=\"20000\"\nautowarmCount=\"4096\" showItems=\"1024\" />\n<cache enable=\"${solr.ltr.enabled:false}\" name=\"QUERY_DOC_FV\"\nclass=\"solr.search.LRUCache\" size=\"4096\" initialSize=\"2048\"\nautowarmCount=\"4096\" regenerator=\"solr.search.NoOpRegenerator\" />\n<enableLazyFieldLoading>true</enableLazyFieldLoading>\n<queryResultWindowSize>200</queryResultWindowSize>\n<queryResultMaxDocsCached>400</queryResultMaxDocsCached>\n\nI'm not sure what has changed so drastically in 6.6 compared to 5.5. I\nnever had a single OOM in 5.5 which has been running for a couple of years.\nMoreover, the memory footprint was much less with 15gb set as Xmx. All my\nfacet parameters have docvalues enabled, it should handle the memory part\nefficiently.\n\nI'm struggling to figure out the root cause. Does 6.6 command more memory\nthan what is currently available on our servers (30gb)? What might be the\nprobable cause for this sort of scenario? What are the best practices to\ntroubleshoot such issues?\n\nAny pointers will be appreciated.\n\nThanks,\nShamik\n\n",
  "denotations": [
    {
      "id": 1,
      "start": 0,
      "end": 4,
      "text": "Hi,\n",
      "type": "Body/Intro",
      "meta": null
    },
    {
      "id": 2,
      "start": 3551,
      "end": 3567,
      "text": "\nThanks,\nShamik\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 3,
      "start": 0,
      "end": 3568,
      "text": "Hi,\n\n   I recently upgraded to Solr 6.6 from 5.5. After running for a couple of\ndays, the entire Solr cluster suddenly came down with OOM exception. Once\nthe servers are being restarted, the memory footprint stays stable for a\nwhile before the sudden spike in memory occurs. The heap surges up quickly\nand hits the max causing the JVM to shut down due to OOM. It starts with\none server but eventually trickles downs to the rest of the nodes, bringing\nthe entire cluster down within a span of 10-15 mins.\n\nThe cluster consists of 6 nodes with two shards having 2 replicas each.\nThere are two collections with total index size close to 24 gb. Each server\nhas 8 CPUs with 30gb memory. Solr is running on an embedded jetty on jdk\n1.8. The JVM parameters are identical to 5.5:\n\nSOLR_JAVA_MEM=\"-Xms1000m -Xmx290000m\"\n\nGC_LOG_OPTS=\"-verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails \\\n  -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps\n-XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime\"\n\nGC_TUNE=\"-XX:NewRatio=3 \\\n-XX:SurvivorRatio=4 \\\n-XX:TargetSurvivorRatio=90 \\\n-XX:MaxTenuringThreshold=8 \\\n-XX:+UseConcMarkSweepGC \\\n-XX:+UseParNewGC \\\n-XX:ConcGCThreads=4 -XX:ParallelGCThreads=4 \\\n-XX:+CMSScavengeBeforeRemark \\\n-XX:PretenureSizeThreshold=64m \\\n-XX:+UseCMSInitiatingOccupancyOnly \\\n-XX:CMSInitiatingOccupancyFraction=50 \\\n-XX:CMSMaxAbortablePrecleanTime=6000 \\\n-XX:+CMSParallelRemarkEnabled \\\n-XX:+ParallelRefProcEnabled\"\n\nI've tried G1GC based on Shawn's WIKI, but didn't make any difference.\nThough G1GC seemed to do well with GC initially, it showed similar\nbehaviour during the spike. It prompted me to revert back to CMS.\n\nI'm doing a hard commit every 5 mins.\n\nSOLR_OPTS=\"$SOLR_OPTS -Xss256k\"\nSOLR_OPTS=\"$SOLR_OPTS -Dsolr.autoCommit.maxTime=300000\"\nSOLR_OPTS=\"$SOLR_OPTS -Dsolr.clustering.enabled=true\"\nSOLR_OPTS=\"$SOLR_OPTS -Dpkiauth.ttl=120000\"\n\nOthe Solr configurations:\n\n<autoSoftCommit>\n<maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>\n</autoSoftCommit>\n\nCache settings:\n\n<maxBooleanClauses>4096</maxBooleanClauses>\n<slowQueryThresholdMillis>1000</slowQueryThresholdMillis>\n<filterCache class=\"solr.FastLRUCache\" size=\"20000\" initialSize=\"4096\"\nautowarmCount=\"512\"/>\n<queryResultCache class=\"solr.LRUCache\" size=\"2000\" initialSize=\"500\"\nautowarmCount=\"100\"/>\n<documentCache class=\"solr.LRUCache\" size=\"60000\" initialSize=\"5000\"\nautowarmCount=\"0\"/>\n<cache name=\"perSegFilter\" class=\"solr.search.LRUCache\" size=\"10\"\ninitialSize=\"0\" autowarmCount=\"10\" regenerator=\"solr.NoOpRegenerator\" />\n<fieldValueCache class=\"solr.FastLRUCache\" size=\"20000\"\nautowarmCount=\"4096\" showItems=\"1024\" />\n<cache enable=\"${solr.ltr.enabled:false}\" name=\"QUERY_DOC_FV\"\nclass=\"solr.search.LRUCache\" size=\"4096\" initialSize=\"2048\"\nautowarmCount=\"4096\" regenerator=\"solr.search.NoOpRegenerator\" />\n<enableLazyFieldLoading>true</enableLazyFieldLoading>\n<queryResultWindowSize>200</queryResultWindowSize>\n<queryResultMaxDocsCached>400</queryResultMaxDocsCached>\n\nI'm not sure what has changed so drastically in 6.6 compared to 5.5. I\nnever had a single OOM in 5.5 which has been running for a couple of years.\nMoreover, the memory footprint was much less with 15gb set as Xmx. All my\nfacet parameters have docvalues enabled, it should handle the memory part\nefficiently.\n\nI'm struggling to figure out the root cause. Does 6.6 command more memory\nthan what is currently available on our servers (30gb)? What might be the\nprobable cause for this sort of scenario? What are the best practices to\ntroubleshoot such issues?\n\nAny pointers will be appreciated.\n\nThanks,\nShamik\n\n",
      "type": "Body",
      "meta": null
    }
  ],
  "meta": {},
  "id": "train/train_6111"
}