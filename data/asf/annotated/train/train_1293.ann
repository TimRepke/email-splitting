{
  "wrapper": "plaintext",
  "text": "first of all I apologize for the length of this message ... there are few\nquestions I would appreciate your help please:\n\n1. originally I wanted to use solrj in my application layer (webapp deployed\nwith tomcat), to query the solr server(s) with multi-cores, non-cloud setup.\n\nSince I need send back XML format to my client, I realize it is not an use\ncase for solrj, so I should abandon the idea (correct?)\n\n2. I also looked into CommonsHttpSolrServer trying to query solr directly,\nwhich supposedly allow me to set XMLResponseParser as  ResponseParser. \nhowever, it seems CommonsHttpSolrServer is deprecated, with httpclient 4.x I\nthink I should use HttpSolrServer. I do need to have a way to set the\nreturned data in xml format, and I want to use pooled http conn manager to\nsupport multiple thread for queries. I thought I could do all this with\nHttpSolrServer, (yes?) as below:\n\nPoolingHttpClientConnectionManager connManager = new\nPoolingHttpClientConnectionManager(); \nconnManager.setMaxTotal(5);\nconnManager.setDefaultMaxPerRoute(4);\n... ...\nCloseableHttpClient httpclient =\nHttpClients.custom().setConnectionManager(connManager).build();\n... ...\nResponseParser parser = new XMLResponseParser();\n... ...\nHttpSolrServer server = new HttpSolrServer(myUrl, httpclient, parser);\n\n... ... \nSolrQuery query = new SolrQuery();\nquery.setQuery(q);\nquery.setParam(\"wt\", \"xml\"); // not needed?\n... ...\nQueryResponse response = server.query(query);\nSolrDocumentList sdl = response.getResults();\n\nat this point will the documents in sdl be in xml format if I use toString()\nlooping through them? will there be overhead if this works at all? will\nsolrj skip the xml parsing and simply return the results as I requested xml\nparser?\n\nI somehow feel its very fishy and I could be better off just not use solrj ?\nwhat is the best practice here?\n\n3. I think my next question could be more like a httpclient question, but it\ndoes relate to solr / cores, so I will hope someone can give me help here:\n\nwhen I try to config PoolingHttpClientConnectionManager, for the per route\nconnection etc, will the following different url considered to be different\nroutes, or since they hit the same server, it will ignore the\ncollection/core part?\n\nString myUrl = \"http://localhost:8983/solr/core1\";\n\nand\n\nString myUrl = \"http://localhost:8983/solr/core2\";\n\n\nThanks!\nRenee\n\n\n\n--\nView this message in context: http://lucene.472066.n3.nabble.com/using-HttpSolrServer-with-PoolingHttpClientConnectionManager-tp4322905.html\nSent from the Solr - User mailing list archive at Nabble.com.\n\n",
  "denotations": [
    {
      "id": 1,
      "start": 2334,
      "end": 2349,
      "text": "\nThanks!\nRenee\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 2,
      "start": 0,
      "end": 2559,
      "text": "first of all I apologize for the length of this message ... there are few\nquestions I would appreciate your help please:\n\n1. originally I wanted to use solrj in my application layer (webapp deployed\nwith tomcat), to query the solr server(s) with multi-cores, non-cloud setup.\n\nSince I need send back XML format to my client, I realize it is not an use\ncase for solrj, so I should abandon the idea (correct?)\n\n2. I also looked into CommonsHttpSolrServer trying to query solr directly,\nwhich supposedly allow me to set XMLResponseParser as  ResponseParser. \nhowever, it seems CommonsHttpSolrServer is deprecated, with httpclient 4.x I\nthink I should use HttpSolrServer. I do need to have a way to set the\nreturned data in xml format, and I want to use pooled http conn manager to\nsupport multiple thread for queries. I thought I could do all this with\nHttpSolrServer, (yes?) as below:\n\nPoolingHttpClientConnectionManager connManager = new\nPoolingHttpClientConnectionManager(); \nconnManager.setMaxTotal(5);\nconnManager.setDefaultMaxPerRoute(4);\n... ...\nCloseableHttpClient httpclient =\nHttpClients.custom().setConnectionManager(connManager).build();\n... ...\nResponseParser parser = new XMLResponseParser();\n... ...\nHttpSolrServer server = new HttpSolrServer(myUrl, httpclient, parser);\n\n... ... \nSolrQuery query = new SolrQuery();\nquery.setQuery(q);\nquery.setParam(\"wt\", \"xml\"); // not needed?\n... ...\nQueryResponse response = server.query(query);\nSolrDocumentList sdl = response.getResults();\n\nat this point will the documents in sdl be in xml format if I use toString()\nlooping through them? will there be overhead if this works at all? will\nsolrj skip the xml parsing and simply return the results as I requested xml\nparser?\n\nI somehow feel its very fishy and I could be better off just not use solrj ?\nwhat is the best practice here?\n\n3. I think my next question could be more like a httpclient question, but it\ndoes relate to solr / cores, so I will hope someone can give me help here:\n\nwhen I try to config PoolingHttpClientConnectionManager, for the per route\nconnection etc, will the following different url considered to be different\nroutes, or since they hit the same server, it will ignore the\ncollection/core part?\n\nString myUrl = \"http://localhost:8983/solr/core1\";\n\nand\n\nString myUrl = \"http://localhost:8983/solr/core2\";\n\n\nThanks!\nRenee\n\n\n\n--\nView this message in context: http://lucene.472066.n3.nabble.com/using-HttpSolrServer-with-PoolingHttpClientConnectionManager-tp4322905.html\nSent from the Solr - User mailing list archive at Nabble.com.\n\n",
      "type": "Body",
      "meta": null
    }
  ],
  "meta": {},
  "id": "train/train_1293"
}