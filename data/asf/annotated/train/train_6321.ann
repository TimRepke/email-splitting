{
  "wrapper": "plaintext",
  "text": "First of all, Solr is a _search_ engine, it wasn't built to be an\nRDBMS. Whenever I see this question (paraphrasing) \"I've indexed my\ntables and want to use Solr just like a DB\" I cringe.\n\nThe join performance goes up with the number of unique values for the\njoin field. High-cardinality fields are the poorer performing type,\nwhich is what \"initial join implementation is O(nterms)\" is\nexpressing.\n\nHave you considered either denormalizing the data or using block joins?\n\nBest,\nErick\n\nOn Mon, Sep 25, 2017 at 6:59 PM, Jaimin Patel <reach2jp@gmail.com> wrote:\n> I am facing a performance problem and could narrow it down to a join query\n> that we are using. The join is on a unique field.\n>\n> We have a person profile stored in RDB in a relational way. Like person\n> name table , address table etc. SOLR indexes are build using this RDB\n> data,Each children is stored as separate document with parent's unique id.\n> At query time , unique id of parent is joined with same in child\n> documents({!join\n> to=par_id from=par_id }) to allow search with AND condition for search\n> terms involving children data\n>\n> I am reading similar issues and it says \"initial join implementation is\n> O(nterms)\".. What does this mean ? I could not find any reference\n> explaining meaning of 0 num_terms_in_field.\n>\n>  Regards,\n> Jai\n\n",
  "denotations": [
    {
      "id": 1,
      "start": 472,
      "end": 485,
      "text": "\nBest,\nErick\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 2,
      "start": 0,
      "end": 486,
      "text": "First of all, Solr is a _search_ engine, it wasn't built to be an\nRDBMS. Whenever I see this question (paraphrasing) \"I've indexed my\ntables and want to use Solr just like a DB\" I cringe.\n\nThe join performance goes up with the number of unique values for the\njoin field. High-cardinality fields are the poorer performing type,\nwhich is what \"initial join implementation is O(nterms)\" is\nexpressing.\n\nHave you considered either denormalizing the data or using block joins?\n\nBest,\nErick\n\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 3,
      "start": 486,
      "end": 560,
      "text": "On Mon, Sep 25, 2017 at 6:59 PM, Jaimin Patel <reach2jp@gmail.com> wrote:\n",
      "type": "Header",
      "meta": null
    },
    {
      "id": 4,
      "start": 560,
      "end": 1316,
      "text": "> I am facing a performance problem and could narrow it down to a join query\n> that we are using. The join is on a unique field.\n>\n> We have a person profile stored in RDB in a relational way. Like person\n> name table , address table etc. SOLR indexes are build using this RDB\n> data,Each children is stored as separate document with parent's unique id.\n> At query time , unique id of parent is joined with same in child\n> documents({!join\n> to=par_id from=par_id }) to allow search with AND condition for search\n> terms involving children data\n>\n> I am reading similar issues and it says \"initial join implementation is\n> O(nterms)\".. What does this mean ? I could not find any reference\n> explaining meaning of 0 num_terms_in_field.\n>\n>  Regards,\n> Jai\n\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 5,
      "start": 1295,
      "end": 1315,
      "text": ">\n>  Regards,\n> Jai\n",
      "type": "Body/Outro",
      "meta": null
    }
  ],
  "meta": {},
  "id": "train/train_6321"
}