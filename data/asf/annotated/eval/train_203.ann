{
  "wrapper": "plaintext",
  "text": "Hi,\n\nWe are using Sliding Event Time Window with Kafka Consumer. The window size\nis 6 minutes, and slide is 2 minutes. We have written a window function to\nselect a particular window out of multiple windows for a keyed stream, e.g.\nwe select about 16 windows out of multiple windows for the keyed stream\nbased on a particular condition.\n\nUpon a normal execution, we get 16 windows for processing inside the\ncondition (in window function mentioned). These windows we are putting in\ndifferent files, named after window start and end times.\n\nthe code is as below:\n\nCalling code\n\n\npublic class RealTimeProcessingSlidingWindow{\n\npublic static void main(String[] args) throws Exception {\n\n// set up the execution environment\nStreamExecutionEnvironment env = StreamExecutionEnvironment.get\nExecutionEnvironment();\n\nenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n// configure the Kafka consumer\nProperties kafkaProps = new Properties();\nkafkaProps.setProperty(\"zookeeper.connect\", LOCAL_ZOOKEEPER_HOST);\nkafkaProps.setProperty(\"bootstrap.servers\", LOCAL_KAFKA_BROKER);\nkafkaProps.setProperty(\"group.id\", DEMO_GROUP);\n// always read the Kafka topic from the start\nkafkaProps.setProperty(\"auto.offset.reset\" ,\"earliest\");\n\n                FlinkKafkaConsumer09<Tuple5<String, String, Float, Float,\nString>> consumer = new FlinkKafkaConsumer09<>(\n\"test\",            // kafka topic name\nnew dataSchema(),\nkafkaProps);\n                DataStream<Tuple5<String, String, Float, Float, String>>\nstream1 = env.addSource(consumer);\n                DataStream<Tuple5<String, String, Float, Float, String>>\nkeyedStream = stream1.assignTimestampsAndWatermarks(new\nBoundedOutOfOrdernessGenerator2());\n\n                keyedStream.keyBy(4)\n.window(SlidingEventTimeWindows.of(Time.minutes6), Time.minutes(2)))   // 6\nmin window with 2 min sliding window\n.apply(new CustomSlidingWindowFunction());\n\n                env.execute(\"Sliding Event Time Window Processing\");\n\n           }\n}\n\n\npublic static class CustomSlidingWindowFunction implements\nWindowFunction<Tuple5<String, String, Float, Float, String>, Tuple5<String,\nString, Float, Float, String>, Tuple, TimeWindow>{\n\n@Override\npublic void apply(Tuple key, TimeWindow window, Iterable<Tuple5<String,\nString, Float, Float, String>> input,\nCollector<Tuple5<String, String, Float, Float, String>> out) throws\nException {\n\nHashMap<String, Tuple5<String, String, Float, Float, String>> windowMap=\nnew HashMap<String,Tuple5<String, String, Float, Float, String>>();\nfor (Tuple5<String, String, Float, Float, String> wr: input){\nwindowMap.put(wr.f1.toString().trim(), wr);\n}\n\n                        ...\n\nSimpleDateFormat sf = new SimpleDateFormat(IndianDateTimeFormat);\n\nif(windowMap.containsKey(tk)){\nTuple5<String, String, Float, Float, String> t = (Tuple5<String, String,\nFloat, Float, String>) windowMap.get(tk);\n\nDate d = sf.parse(t.f0.trim());\n\n                                ...\n\n                                // Condition for selecting a window\nif(d.after(x) && d.before(y)){\n// Write the window output to separate files named after window Lat and Lon\nwriteWindowToFile(t, window, input);\n                                    }\n                         }\n                }\n        }\n\n// Get the buffered writer\nprivate static synchronized BufferedWriter getWriter(String fileName)\nthrows IOException{\nreturn new BufferedWriter(new FileWriter(fileName, true));\n}\n// Writes an entire window to file for the records in that window\nprivate static synchronized void writeWindowToFile(Tuple5<String, String,\nFloat, Float, String> target, TimeWindow window, Iterable<Tuple5<String,\nString, Float, Float, String>> input) throws IOException{\n// Create a file to write a window to\nString fileName = target.f2.toString() + \"-\" + target.f3.toString()+\".csv\";\nBufferedWriter br = getWriter(fileName);\n\n// Iterate and put the records in file\nfor (Tuple5<String, String, Float, Float, String> tr: input){\nbr.write(tr.f1.toString().trim()+\", \"+\nconvertLongIntoDate(window.getStart())+\",\n\"+convertLongIntoDate(window.getEnd())+\",\n\"+\ntr.f0+\", \"+tr.f2+\", \"+tr.f3+'\\n');\n}\n// flush the writer and close it\nbr.close();\n}\n\nWe have written the code to be threadsafe while creating and writing to file\n\nIn this code, If we execute the code multiple times on the Kafka Stream\n(with certain records) most times we get 16 files with corresponding window\nrecords, which is the correct behavior.\n\nHowever sometimes only 4 files get created or 1 file or any number less\nthan 16 gets created randomly, this is anomalous behavior.\n\nWhat could be the cause of such behavior? How do we resolve this?\n\nPlease, could you identify and suggest a solution/s.\n\nThanks.\n\n\n*Sujit Sakre*\n\n-- \nThis email is sent on behalf of Northgate Public Services (UK) Limited and \nits associated companies including Rave Technologies (India) Pvt Limited \n(together \"Northgate Public Services\") and is strictly confidential and \nintended solely for the addressee(s). \nIf you are not the intended recipient of this email you must: (i) not \ndisclose, copy or distribute its contents to any other person nor use its \ncontents in any way or you may be acting unlawfully;  (ii) contact \nNorthgate Public Services immediately on +44(0)1908 264500 quoting the name \nof the sender and the addressee then delete it from your system.\nNorthgate Public Services has taken reasonable precautions to ensure that \nno viruses are contained in this email, but does not accept any \nresponsibility once this email has been transmitted.  You should scan \nattachments (if any) for viruses.\n\nNorthgate Public Services (UK) Limited, registered in England and Wales \nunder number 00968498 with a registered address of Peoplebuilding 2, \nPeoplebuilding Estate, Maylands Avenue, Hemel Hempstead, Hertfordshire, HP2 \n4NN.  Rave Technologies (India) Pvt Limited, registered in India under \nnumber 117068 with a registered address of 2nd Floor, Ballard House, Adi \nMarzban Marg, Ballard Estate, Mumbai, Maharashtra, India, 400001.\n\n",
  "denotations": [
    {
      "id": 1,
      "start": 0,
      "end": 4,
      "text": "Hi,\n",
      "type": "Body/Intro",
      "meta": null
    },
    {
      "id": 2,
      "start": 4670,
      "end": 4695,
      "text": "\nThanks.\n\n\n*Sujit Sakre*\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 3,
      "start": 0,
      "end": 5997,
      "text": "Hi,\n\nWe are using Sliding Event Time Window with Kafka Consumer. The window size\nis 6 minutes, and slide is 2 minutes. We have written a window function to\nselect a particular window out of multiple windows for a keyed stream, e.g.\nwe select about 16 windows out of multiple windows for the keyed stream\nbased on a particular condition.\n\nUpon a normal execution, we get 16 windows for processing inside the\ncondition (in window function mentioned). These windows we are putting in\ndifferent files, named after window start and end times.\n\nthe code is as below:\n\nCalling code\n\n\npublic class RealTimeProcessingSlidingWindow{\n\npublic static void main(String[] args) throws Exception {\n\n// set up the execution environment\nStreamExecutionEnvironment env = StreamExecutionEnvironment.get\nExecutionEnvironment();\n\nenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n// configure the Kafka consumer\nProperties kafkaProps = new Properties();\nkafkaProps.setProperty(\"zookeeper.connect\", LOCAL_ZOOKEEPER_HOST);\nkafkaProps.setProperty(\"bootstrap.servers\", LOCAL_KAFKA_BROKER);\nkafkaProps.setProperty(\"group.id\", DEMO_GROUP);\n// always read the Kafka topic from the start\nkafkaProps.setProperty(\"auto.offset.reset\" ,\"earliest\");\n\n                FlinkKafkaConsumer09<Tuple5<String, String, Float, Float,\nString>> consumer = new FlinkKafkaConsumer09<>(\n\"test\",            // kafka topic name\nnew dataSchema(),\nkafkaProps);\n                DataStream<Tuple5<String, String, Float, Float, String>>\nstream1 = env.addSource(consumer);\n                DataStream<Tuple5<String, String, Float, Float, String>>\nkeyedStream = stream1.assignTimestampsAndWatermarks(new\nBoundedOutOfOrdernessGenerator2());\n\n                keyedStream.keyBy(4)\n.window(SlidingEventTimeWindows.of(Time.minutes6), Time.minutes(2)))   // 6\nmin window with 2 min sliding window\n.apply(new CustomSlidingWindowFunction());\n\n                env.execute(\"Sliding Event Time Window Processing\");\n\n           }\n}\n\n\npublic static class CustomSlidingWindowFunction implements\nWindowFunction<Tuple5<String, String, Float, Float, String>, Tuple5<String,\nString, Float, Float, String>, Tuple, TimeWindow>{\n\n@Override\npublic void apply(Tuple key, TimeWindow window, Iterable<Tuple5<String,\nString, Float, Float, String>> input,\nCollector<Tuple5<String, String, Float, Float, String>> out) throws\nException {\n\nHashMap<String, Tuple5<String, String, Float, Float, String>> windowMap=\nnew HashMap<String,Tuple5<String, String, Float, Float, String>>();\nfor (Tuple5<String, String, Float, Float, String> wr: input){\nwindowMap.put(wr.f1.toString().trim(), wr);\n}\n\n                        ...\n\nSimpleDateFormat sf = new SimpleDateFormat(IndianDateTimeFormat);\n\nif(windowMap.containsKey(tk)){\nTuple5<String, String, Float, Float, String> t = (Tuple5<String, String,\nFloat, Float, String>) windowMap.get(tk);\n\nDate d = sf.parse(t.f0.trim());\n\n                                ...\n\n                                // Condition for selecting a window\nif(d.after(x) && d.before(y)){\n// Write the window output to separate files named after window Lat and Lon\nwriteWindowToFile(t, window, input);\n                                    }\n                         }\n                }\n        }\n\n// Get the buffered writer\nprivate static synchronized BufferedWriter getWriter(String fileName)\nthrows IOException{\nreturn new BufferedWriter(new FileWriter(fileName, true));\n}\n// Writes an entire window to file for the records in that window\nprivate static synchronized void writeWindowToFile(Tuple5<String, String,\nFloat, Float, String> target, TimeWindow window, Iterable<Tuple5<String,\nString, Float, Float, String>> input) throws IOException{\n// Create a file to write a window to\nString fileName = target.f2.toString() + \"-\" + target.f3.toString()+\".csv\";\nBufferedWriter br = getWriter(fileName);\n\n// Iterate and put the records in file\nfor (Tuple5<String, String, Float, Float, String> tr: input){\nbr.write(tr.f1.toString().trim()+\", \"+\nconvertLongIntoDate(window.getStart())+\",\n\"+convertLongIntoDate(window.getEnd())+\",\n\"+\ntr.f0+\", \"+tr.f2+\", \"+tr.f3+'\\n');\n}\n// flush the writer and close it\nbr.close();\n}\n\nWe have written the code to be threadsafe while creating and writing to file\n\nIn this code, If we execute the code multiple times on the Kafka Stream\n(with certain records) most times we get 16 files with corresponding window\nrecords, which is the correct behavior.\n\nHowever sometimes only 4 files get created or 1 file or any number less\nthan 16 gets created randomly, this is anomalous behavior.\n\nWhat could be the cause of such behavior? How do we resolve this?\n\nPlease, could you identify and suggest a solution/s.\n\nThanks.\n\n\n*Sujit Sakre*\n\n-- \nThis email is sent on behalf of Northgate Public Services (UK) Limited and \nits associated companies including Rave Technologies (India) Pvt Limited \n(together \"Northgate Public Services\") and is strictly confidential and \nintended solely for the addressee(s). \nIf you are not the intended recipient of this email you must: (i) not \ndisclose, copy or distribute its contents to any other person nor use its \ncontents in any way or you may be acting unlawfully;  (ii) contact \nNorthgate Public Services immediately on +44(0)1908 264500 quoting the name \nof the sender and the addressee then delete it from your system.\nNorthgate Public Services has taken reasonable precautions to ensure that \nno viruses are contained in this email, but does not accept any \nresponsibility once this email has been transmitted.  You should scan \nattachments (if any) for viruses.\n\nNorthgate Public Services (UK) Limited, registered in England and Wales \nunder number 00968498 with a registered address of Peoplebuilding 2, \nPeoplebuilding Estate, Maylands Avenue, Hemel Hempstead, Hertfordshire, HP2 \n4NN.  Rave Technologies (India) Pvt Limited, registered in India under \nnumber 117068 with a registered address of 2nd Floor, Ballard House, Adi \nMarzban Marg, Ballard Estate, Mumbai, Maharashtra, India, 400001.\n\n",
      "type": "Body",
      "meta": null
    }
  ],
  "meta": {},
  "id": "eval/train_203"
}