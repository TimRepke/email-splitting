{
  "wrapper": "plaintext",
  "text": "Yes, I think so. @Aljoscha, please correct me if I describe something wrong\nhere.\n\nThe first map tasks (Map(1) and Map(2)) broadcast their watermarks to all\nconnected subsequent tasks (window(1) and window(2)).\nThe window tasks update their respective watermarks based on the watermarks\nreceived from their input tasks (map(1) and map(2)) and forward their\nwatermarks to all connected subsequent tasks.\nSince map does not require a shuffle, mapB(1) will receive only watermarks\nfrom window(1) and mapB(2) from window(2). However, since the watermarks of\nthe windows depend on their inputs (map(1) and map(2)), the mapB tasks will\nget watermarks from all inputs.\n\nNote that watermarks are not bound to specified records but define the\n\"logical time\" of an operator.\nBecause watermarks are always broadcasted to all subsequent tasks, the\nwhole application is \"synced\" to the same time after the first keyBy() (or\nanyother kind of full shuffle).\nSo the progress of time is determined by the \"slowest\" input.\n\nBest, Fabian\n\n2017-06-14 13:51 GMT+02:00 Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>:\n\n> One more question: continuing with the same example but supposing that the\n> Map operators in the diagram are followed by a KeyBy, which is then\n> followed by another Map, let\u00e2\u20ac\u2122s say with operators name MapB(1) and MapB(2).\n> Let\u00e2\u20ac\u2122s further say that by luck of the draw, the keys of the records\n> processed by Map(2) are such that all those records end up going to MapB(2)\n> and none of them end up shuffled to MapB(1). Would MapB(1) still continue\n> to get watermarks generated from Map(2), even though it\u00e2\u20ac\u2122s not getting the\n> records that caused those watermarks to be generated?\n>\n>\n>\n> Thanks,\n>\n>\n>\n> Ray\n>\n>\n>\n> *From: *Fabian Hueske <fhueske@gmail.com>\n> *Date: *Monday, June 12, 2017 at 4:06 PM\n>\n> *To: *Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>\n> *Cc: *\"user@flink.apache.org\" <user@flink.apache.org>\n> *Subject: *Re: At what point do watermarks get injected into the stream?\n>\n>\n>\n> Hi,\n>\n> each operator keeps track of the latest (and therefore maximum) watermark\n> received from each of its inputs and sets its own internal time to the\n> minimum watermark of each input.\n> In the example, window(1) has two inputs (Map(1) and Map(2)). If Window(1)\n> first receives a WM 33 from Map(1) it won't emit a watermark with 33 until\n> it received a watermark with >= 33 from Map(2).\n>\n> All operators use this logic for watermark propagation. So it does not\n> matter whether this is a window operator or a CEP operator.\n>\n> Let me know if you have further questions,\n>\n> Fabian\n>\n>\n>\n> 2017-06-12 21:55 GMT+02:00 Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>:\n>\n> Thanks!\n>\n>\n>\n> I had a couple some follow-up questions to the example in the\n> documentation. Suppose Source 1 sends a watermark of 33, and Source 2 sends\n> a watermark of 17. If I understand correctly, map(1) will forward the\n> watermark of 33 to window(1) and window(2), and map(2) will forward the\n> watermark of 17 to the same window operators. I\u00e2\u20ac\u2122m assuming there is nothing\n> to prevent window(1) and window(2) from getting the watermark of 33 before\n> the watermark of 17, right? In that case, how do window(1) and window(2)\n> compute the minimum watermark to forward to the next operator downstream?\n> Will it be a per-window watermark?\n>\n>\n>\n> What would happen if instead if a window operator in that position, we had\n> something like the CEP operator, which in effect maintains state and does\n> aggregations without windowing (or another similar such operator)? How does\n> it determine what the minimum watermark is at any given time, in light of\n> the fact that, in principle, it might receive a watermark value smaller\n> than anything it\u00e2\u20ac\u2122s seen before from a parallel source?\n>\n>\n>\n> Ray\n>\n>\n>\n> *From: *Fabian Hueske <fhueske@gmail.com>\n> *Date: *Sunday, June 11, 2017 at 5:54 PM\n>\n>\n> *To: *Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>\n> *Cc: *\"user@flink.apache.org\" <user@flink.apache.org>\n> *Subject: *Re: At what point do watermarks get injected into the stream?\n>\n>\n>\n> Each parallel instance of a TimestampAssigner independently assigns\n> timestamps.\n>\n> After a shuffle, operators forward the minimum watermark across all input\n> connections. For details have a look at the watermarks documentation [1].\n>\n> Best, Fabian\n>\n> [1] https://ci.apache.org/projects/flink/flink-docs-\n> release-1.3/dev/event_time.html#watermarks-in-parallel-streams\n>\n>\n>\n> 2017-06-11 17:22 GMT+02:00 Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>:\n>\n> Thanks for the explanation, Fabian.\n>\n>\n>\n> Suppose I have a parallel source that does not inject watermarks, and the\n> first operation on the DataStream is assignTimestampsAndWatermarks. Does\n> each parallel task that makes up the source independently inject watermarks\n> for the records that it has read? Suppose I then call keyBy and a shuffle\n> ensues. Will the resulting partitions after the shuffle have interleaved\n> watermarks from the various source tasks?\n>\n>\n>\n> More concretely, suppose s source has a degree of parallelism of two. One\n> of the source tasks injects the watermarks 2 and 5, while the other injects\n> 3 and 10. There is then a shuffle, creating two different partitions. Will\n> all the watermarks be broadcast to all the partitions? Or is it possible\n> for, say, one partition to end up with watermarks 2 and 10 and another with\n> 3 and 5? And after the shuffle, how do we ensure that the watermarks are\n> processed in order by the operators receiving them?\n>\n>\n>\n> Thanks,\n>\n>\n>\n> Ray\n>\n>\n>\n> *From: *Fabian Hueske <fhueske@gmail.com>\n> *Date: *Saturday, June 10, 2017 at 3:56 PM\n> *To: *Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>\n> *Cc: *\"user@flink.apache.org\" <user@flink.apache.org>\n> *Subject: *Re: At what point do watermarks get injected into the stream?\n>\n>\n>\n> Hi Ray,\n>\n> in principle, watermarks can be injected anywhere in a stream by calling\n> DataStream.assignTimestampsAndWatermarks().\n>\n> However, timestamps are usually injected as soon as possible after a\n> stream in ingested (before the first shuffle). The reason is that\n> watermarks depend on the order of events (and their timestamps) in the\n> stream. While Flink guarantees the order of events within a partition, a\n> shuffle interleaves events of different partitions in an unpredictable way\n> such that it is not possible to reason about the order of timestamps\n> afterwards.\n>\n> The most common way to inject watermarks is directly inside of a\n> SourceFunction or with a TimestampAssigner before the first shuffle.\n>\n> Best, Fabian\n>\n>\n>\n> 2017-06-09 0:46 GMT+02:00 Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>:\n>\n> I\u00e2\u20ac\u2122m trying to build a mental model of how watermarks get injected into the\n> stream. Suppose I have a stream with a parallel source, and I\u00e2\u20ac\u2122m running a\n> cluster with multiple task managers. Does each parallel source reader\n> inject watermarks, which are then forwarded to downstream consumers and\n> shuffled between task managers? Or are watermarks created after the\n> shuffle, when the stream records reach their destined task manager and\n> right before they\u00e2\u20ac\u2122re processed by the operator?\n>\n>\n>\n> Thanks,\n>\n>\n>\n> Ray\n>\n>\n>\n>\n>\n>\n>\n\n",
  "denotations": [
    {
      "id": 1,
      "start": 1005,
      "end": 1019,
      "text": "\nBest, Fabian\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 2,
      "start": 0,
      "end": 1020,
      "text": "Yes, I think so. @Aljoscha, please correct me if I describe something wrong\nhere.\n\nThe first map tasks (Map(1) and Map(2)) broadcast their watermarks to all\nconnected subsequent tasks (window(1) and window(2)).\nThe window tasks update their respective watermarks based on the watermarks\nreceived from their input tasks (map(1) and map(2)) and forward their\nwatermarks to all connected subsequent tasks.\nSince map does not require a shuffle, mapB(1) will receive only watermarks\nfrom window(1) and mapB(2) from window(2). However, since the watermarks of\nthe windows depend on their inputs (map(1) and map(2)), the mapB tasks will\nget watermarks from all inputs.\n\nNote that watermarks are not bound to specified records but define the\n\"logical time\" of an operator.\nBecause watermarks are always broadcasted to all subsequent tasks, the\nwhole application is \"synced\" to the same time after the first keyBy() (or\nanyother kind of full shuffle).\nSo the progress of time is determined by the \"slowest\" input.\n\nBest, Fabian\n\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 3,
      "start": 1020,
      "end": 1093,
      "text": "2017-06-14 13:51 GMT+02:00 Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>:\n",
      "type": "Header",
      "meta": null
    },
    {
      "id": 4,
      "start": 1685,
      "end": 1709,
      "text": ">\n> Thanks,\n>\n>\n>\n> Ray\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 5,
      "start": 1093,
      "end": 1715,
      "text": "\n> One more question: continuing with the same example but supposing that the\n> Map operators in the diagram are followed by a KeyBy, which is then\n> followed by another Map, let\u00e2\u20ac\u2122s say with operators name MapB(1) and MapB(2).\n> Let\u00e2\u20ac\u2122s further say that by luck of the draw, the keys of the records\n> processed by Map(2) are such that all those records end up going to MapB(2)\n> and none of them end up shuffled to MapB(1). Would MapB(1) still continue\n> to get watermarks generated from Map(2), even though it\u00e2\u20ac\u2122s not getting the\n> records that caused those watermarks to be generated?\n>\n>\n>\n> Thanks,\n>\n>\n>\n> Ray\n>\n>\n>\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 6,
      "start": 1715,
      "end": 1988,
      "text": "> *From: *Fabian Hueske <fhueske@gmail.com>\n> *Date: *Monday, June 12, 2017 at 4:06 PM\n>\n> *To: *Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>\n> *Cc: *\"user@flink.apache.org\" <user@flink.apache.org>\n> *Subject: *Re: At what point do watermarks get injected into the stream?\n",
      "type": "Header",
      "meta": null
    },
    {
      "id": 7,
      "start": 1992,
      "end": 2000,
      "text": ">\n> Hi,\n",
      "type": "Body/Intro",
      "meta": null
    },
    {
      "id": 8,
      "start": 2529,
      "end": 2585,
      "text": "> Let me know if you have further questions,\n>\n> Fabian\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 9,
      "start": 1988,
      "end": 2591,
      "text": ">\n>\n>\n> Hi,\n>\n> each operator keeps track of the latest (and therefore maximum) watermark\n> received from each of its inputs and sets its own internal time to the\n> minimum watermark of each input.\n> In the example, window(1) has two inputs (Map(1) and Map(2)). If Window(1)\n> first receives a WM 33 from Map(1) it won't emit a watermark with 33 until\n> it received a watermark with >= 33 from Map(2).\n>\n> All operators use this logic for watermark propagation. So it does not\n> matter whether this is a window operator or a CEP operator.\n>\n> Let me know if you have further questions,\n>\n> Fabian\n>\n>\n>\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 10,
      "start": 2591,
      "end": 2666,
      "text": "> 2017-06-12 21:55 GMT+02:00 Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>:\n",
      "type": "Header",
      "meta": null
    },
    {
      "id": 11,
      "start": 2666,
      "end": 2678,
      "text": ">\n> Thanks!\n",
      "type": "Body/Intro",
      "meta": null
    },
    {
      "id": 12,
      "start": 3767,
      "end": 3775,
      "text": ">\n> Ray\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 13,
      "start": 2666,
      "end": 3781,
      "text": ">\n> Thanks!\n>\n>\n>\n> I had a couple some follow-up questions to the example in the\n> documentation. Suppose Source 1 sends a watermark of 33, and Source 2 sends\n> a watermark of 17. If I understand correctly, map(1) will forward the\n> watermark of 33 to window(1) and window(2), and map(2) will forward the\n> watermark of 17 to the same window operators. I\u00e2\u20ac\u2122m assuming there is nothing\n> to prevent window(1) and window(2) from getting the watermark of 33 before\n> the watermark of 17, right? In that case, how do window(1) and window(2)\n> compute the minimum watermark to forward to the next operator downstream?\n> Will it be a per-window watermark?\n>\n>\n>\n> What would happen if instead if a window operator in that position, we had\n> something like the CEP operator, which in effect maintains state and does\n> aggregations without windowing (or another similar such operator)? How does\n> it determine what the minimum watermark is at any given time, in light of\n> the fact that, in principle, it might receive a watermark value smaller\n> than anything it\u00e2\u20ac\u2122s seen before from a parallel source?\n>\n>\n>\n> Ray\n>\n>\n>\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 14,
      "start": 3781,
      "end": 4056,
      "text": "> *From: *Fabian Hueske <fhueske@gmail.com>\n> *Date: *Sunday, June 11, 2017 at 5:54 PM\n>\n>\n> *To: *Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>\n> *Cc: *\"user@flink.apache.org\" <user@flink.apache.org>\n> *Subject: *Re: At what point do watermarks get injected into the stream?\n",
      "type": "Header",
      "meta": null
    },
    {
      "id": 15,
      "start": 4300,
      "end": 4317,
      "text": ">\n> Best, Fabian\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 16,
      "start": 4056,
      "end": 4445,
      "text": ">\n>\n>\n> Each parallel instance of a TimestampAssigner independently assigns\n> timestamps.\n>\n> After a shuffle, operators forward the minimum watermark across all input\n> connections. For details have a look at the watermarks documentation [1].\n>\n> Best, Fabian\n>\n> [1] https://ci.apache.org/projects/flink/flink-docs-\n> release-1.3/dev/event_time.html#watermarks-in-parallel-streams\n>\n>\n>\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 17,
      "start": 4445,
      "end": 4520,
      "text": "> 2017-06-11 17:22 GMT+02:00 Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>:\n",
      "type": "Header",
      "meta": null
    },
    {
      "id": 18,
      "start": 5513,
      "end": 5537,
      "text": ">\n> Thanks,\n>\n>\n>\n> Ray\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 19,
      "start": 4520,
      "end": 5543,
      "text": ">\n> Thanks for the explanation, Fabian.\n>\n>\n>\n> Suppose I have a parallel source that does not inject watermarks, and the\n> first operation on the DataStream is assignTimestampsAndWatermarks. Does\n> each parallel task that makes up the source independently inject watermarks\n> for the records that it has read? Suppose I then call keyBy and a shuffle\n> ensues. Will the resulting partitions after the shuffle have interleaved\n> watermarks from the various source tasks?\n>\n>\n>\n> More concretely, suppose s source has a degree of parallelism of two. One\n> of the source tasks injects the watermarks 2 and 5, while the other injects\n> 3 and 10. There is then a shuffle, creating two different partitions. Will\n> all the watermarks be broadcast to all the partitions? Or is it possible\n> for, say, one partition to end up with watermarks 2 and 10 and another with\n> 3 and 5? And after the shuffle, how do we ensure that the watermarks are\n> processed in order by the operators receiving them?\n>\n>\n>\n> Thanks,\n>\n>\n>\n> Ray\n>\n>\n>\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 20,
      "start": 5543,
      "end": 5816,
      "text": "> *From: *Fabian Hueske <fhueske@gmail.com>\n> *Date: *Saturday, June 10, 2017 at 3:56 PM\n> *To: *Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>\n> *Cc: *\"user@flink.apache.org\" <user@flink.apache.org>\n> *Subject: *Re: At what point do watermarks get injected into the stream?\n",
      "type": "Header",
      "meta": null
    },
    {
      "id": 21,
      "start": 5820,
      "end": 5832,
      "text": ">\n> Hi Ray,\n",
      "type": "Body/Intro",
      "meta": null
    },
    {
      "id": 22,
      "start": 6546,
      "end": 6563,
      "text": ">\n> Best, Fabian\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 23,
      "start": 5816,
      "end": 6569,
      "text": ">\n>\n>\n> Hi Ray,\n>\n> in principle, watermarks can be injected anywhere in a stream by calling\n> DataStream.assignTimestampsAndWatermarks().\n>\n> However, timestamps are usually injected as soon as possible after a\n> stream in ingested (before the first shuffle). The reason is that\n> watermarks depend on the order of events (and their timestamps) in the\n> stream. While Flink guarantees the order of events within a partition, a\n> shuffle interleaves events of different partitions in an unpredictable way\n> such that it is not possible to reason about the order of timestamps\n> afterwards.\n>\n> The most common way to inject watermarks is directly inside of a\n> SourceFunction or with a TimestampAssigner before the first shuffle.\n>\n> Best, Fabian\n>\n>\n>\n",
      "type": "Body",
      "meta": null
    },
    {
      "id": 24,
      "start": 6569,
      "end": 6643,
      "text": "> 2017-06-09 0:46 GMT+02:00 Ray Ruvinskiy <ray.ruvinskiy@arcticwolf.com>:\n",
      "type": "Header",
      "meta": null
    },
    {
      "id": 25,
      "start": 7147,
      "end": 7171,
      "text": ">\n> Thanks,\n>\n>\n>\n> Ray\n",
      "type": "Body/Outro",
      "meta": null
    },
    {
      "id": 26,
      "start": 6643,
      "end": 7186,
      "text": ">\n> I\u00e2\u20ac\u2122m trying to build a mental model of how watermarks get injected into the\n> stream. Suppose I have a stream with a parallel source, and I\u00e2\u20ac\u2122m running a\n> cluster with multiple task managers. Does each parallel source reader\n> inject watermarks, which are then forwarded to downstream consumers and\n> shuffled between task managers? Or are watermarks created after the\n> shuffle, when the stream records reach their destined task manager and\n> right before they\u00e2\u20ac\u2122re processed by the operator?\n>\n>\n>\n> Thanks,\n>\n>\n>\n> Ray\n>\n>\n>\n>\n>\n>\n>\n\n",
      "type": "Body",
      "meta": null
    }
  ],
  "meta": {},
  "id": "eval/train_2800"
}